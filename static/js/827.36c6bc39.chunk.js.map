{"version":3,"file":"static/js/827.36c6bc39.chunk.js","mappings":"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","sources":["components/authentication/ui-components/card.js","components/authentication/utils/passwordStrength.js","components/authentication/forms/registerForm.js","components/authentication/ui-components/modal.js","components/authentication/views/register.jsx"],"sourcesContent":["import React from 'react'\r\n\r\n\r\n/**\r\n * \r\n * @param {*} props - from the views\r\n * @returns The card used to wrap the forms content\r\n */\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card shadow rounded-4 text-center\" style={{ width: \"24rem\", minHeight: '14rem' }}>\r\n        <div className=\"card-body\" >\r\n            {props.children}\r\n        </div>\r\n    </div>\r\n)\r\n\r\n","// has number\nconst hasNumber = (number) => new RegExp(/[0-9]/).test(number);\n\n// has mix of small and capitals\nconst hasMixed = (number) => new RegExp(/[a-z]/).test(number) && new RegExp(/[A-Z]/).test(number);\n\n// has special chars\nconst hasSpecial = (number) => new RegExp(/[!#@$%^&*)(+=._-]/).test(number);\n\n\n/**\n * \n * @param {*} count - to set name, color and percentage based on password strength\n * @returns {Object} - { label: string, color: string, percentage: string }\n */\n\nexport const strengthColor = (count) => {\n    if (count < 2) return { label: 'Poor', color: '#f44336', percentage: '10%' };\n    if (count < 3) return { label: 'Weak', color: '#ffc107', percentage: '25%' };\n    if (count < 4) return { label: 'Normal', color: '#ffab91', percentage: '50%' };\n    if (count < 5) return { label: 'Good', color: '#00e676', percentage: '75%' };\n    if (count < 6) return { label: 'Strong', color: '#00c853', percentage: '100%' };\n    return { label: 'Poor', color: '#f44336' };\n};\n\n\n/**\n * \n * @param {*} number - to indicate the password strength \n * @returns {number} - strengths\n */\n\nexport const strengthIndicator = (number) => {\n    let strengths = 0;\n    if (number.length > 7) strengths += 1;\n    if (number.length > 9) strengths += 1;\n    if (hasNumber(number)) strengths += 1;\n    if (hasSpecial(number)) strengths += 1;\n    if (hasMixed(number)) strengths += 1;\n    return strengths;\n};\n","import React, { useState } from 'react';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { strengthColor, strengthIndicator } from '../utils/passwordStrength';\r\n\r\n/**\r\n * This is the Registration Form Schema \r\n */\r\n\r\nconst RegisterFormSchema = Yup.object().shape({\r\n    firstName: Yup.string()\r\n        .min(3, 'Too Short!')\r\n        .max(50, 'Too Long!')\r\n        .required('Required'),\r\n    lastName: Yup.string()\r\n        .min(3, 'Too Short!')\r\n        .max(50, 'Too Long!')\r\n        .required('Required'),\r\n    email: Yup.string()\r\n        .email('Invalid')\r\n        .required('is required'),\r\n    password: Yup.string()\r\n        .min(8, 'Too Short!')\r\n        .max(50, 'Too Long!')\r\n        .required('is required'),\r\n    termCondCheck: Yup.boolean().oneOf([true], 'is required.'),\r\n});\r\n\r\n/**\r\n * Registration Form with inputs validator\r\n * @param {*} onSubmit - Form data \r\n * @returns {Object} - {firstName: string, lastName: string, email: string, password: string, termCondCheck: Boolean}\r\n */\r\n\r\nexport const RegisterValidationSchema = ({ onSubmit }) => {\r\n    const [strength, setStrength] = useState(0);\r\n    const [level, setLevel] = useState();\r\n\r\n    const PasswordLevel = (value) => {\r\n        const temp = strengthIndicator(value);\r\n        setStrength(temp);\r\n        setLevel(strengthColor(temp));\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    firstName: '',\r\n                    lastName: '',\r\n                    email: '',\r\n                    password: '',\r\n                    termCondCheck: false,\r\n                }}\r\n                validationSchema={RegisterFormSchema}\r\n                onSubmit={async (values, actions) => {\r\n                    await new Promise((r) => setTimeout(r, 1000));\r\n                    onSubmit(values);\r\n                    console.log(values);\r\n                    actions.resetForm({});\r\n                    setStrength(0);\r\n                    actions.setSubmitting(false);\r\n                }}\r\n            >\r\n                {({ errors, touched, isSubmitting }) => (\r\n                    <Form>\r\n                        <div className=\"d-grid gap-3 p-2\">\r\n                            <div className=\"row g-3\">\r\n                                <div className=\"col-sm\">\r\n                                    <div className=\"form-floating\">\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            name=\"firstName\"\r\n                                            className={`form-control shadow-none rounded-4 ${touched.firstName && errors.firstName ? \"is-invalid\" : \"\"}`}\r\n                                            placeholder=\"firstName\" />\r\n                                        <label htmlFor=\"firstName\" className={touched.firstName && errors.firstName ? \"text-danger\" : \"text-body\"}>{touched.firstName && errors.firstName ? `${errors.firstName}` : \"First Name\"}</label>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-sm\">\r\n                                    <div className=\"form-floating\">\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            name=\"lastName\"\r\n                                            className={`form-control shadow-none rounded-4 ${touched.lastName && errors.lastName ? \"is-invalid\" : \"\"}`}\r\n                                            placeholder=\"lastName\" />\r\n                                        <label htmlFor=\"lastName\" className={touched.lastName && errors.lastName ? \"text-danger\" : \"text-body\"}>{touched.lastName && errors.lastName ? `${errors.lastName}` : \"Last Name\"}</label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-floating\">\r\n                                <Field\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    className={`form-control shadow-none rounded-4 ${touched.email && errors.email ? \"is-invalid\" : \"\"}`}\r\n                                    placeholder=\"Email\" />\r\n                                <label htmlFor=\"email\" className={touched.email && errors.email ? \"text-danger\" : \"text-body\"}>{`Email address ${touched.email && errors.email ? errors.email : \"\"}`}</label>\r\n                            </div>\r\n                            <div className=\"form-floating\">\r\n                                <Field\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    className={`form-control shadow-none rounded-4 ${touched.password && errors.password ? \"is-invalid\" : \"\"}`}\r\n                                    placeholder=\"Password\"\r\n                                    onKeyUp={(e) => {\r\n                                        PasswordLevel(e.target.value);\r\n                                    }} />\r\n                                <label htmlFor=\"password\" className={touched.password && errors.password ? \"text-danger\" : \"text-body\"}>{`Password ${touched.password && errors.password ? errors.password : \"\"}`}</label>\r\n                            </div>\r\n                            {strength !== 0 && (\r\n                                <div className=\"progress\" role=\"progressbar\" aria-label=\"Basic example\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\">\r\n                                    <div className=\"progress-bar\" style={{ backgroundColor: level?.color, width: level?.percentage }}>{level?.label}</div>\r\n                                </div>)}\r\n                            <div className='form-check d-flex ps-1'>\r\n                                <Field type=\"checkbox\" id='termCondCheck' name='termCondCheck' onClick={() => touched.termCondCheck = true} />\r\n                                <label className=\"form-check-label ms-2\" htmlFor=\"termCondCheck\">\r\n                                    <div className={`d-flex ${touched.termCondCheck && errors.termCondCheck ? \"text-danger\" : \"text-body\"}`}>\r\n                                        Agree with &nbsp;\r\n                                    </div>\r\n                                </label>\r\n                                <span className={`nav-link ${touched.termCondCheck && errors.termCondCheck ? \" text-danger\" : \"text-body\"}`} role=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#registerFormModal\" style={{ color: '#6456ff', textDecoration: 'underline' }}>Terms & Condition{touched.termCondCheck && errors.termCondCheck ? \"\" : \".\"}</span>\r\n                                <label className=\"form-check-label\" htmlFor=\"termCondCheck\">\r\n                                    <div className={`d-flex ${touched.termCondCheck && errors.termCondCheck ? \" text-danger\" : \"text-body\"}`}>\r\n                                        <div>&nbsp;&nbsp;{touched.termCondCheck && errors.termCondCheck ? errors.termCondCheck : null}</div>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                            <button className='btn rounded-3 p-2 fw-bold' type=\"submit\" disabled={isSubmitting} style={{ backgroundColor: '#6456ff', color: 'white' }}>{isSubmitting ? <><span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>&nbsp;<strong>Signing Up</strong></> : <strong>Sign Up</strong>}</button>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\n\r\n\r\n/**\r\n * \r\n * @param {*} props - from the view\r\n * @returns The modal used to show the terms and conditions text\r\n */\r\n\r\nexport const Modal = (props) => {\r\n\r\n    return (\r\n        <div className=\"modal fade\" id=\"registerFormModal\" aria-labelledby=\"registerFormModalLabel\" aria-hidden=\"true\">\r\n            <div className=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\" id=\"registerFormModalLabel\">Terms & Condition</h5>\r\n                        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        {props.children}\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport { RegisterValidationSchema } from '../forms/registerForm';\r\nimport { BsPencilSquare } from 'react-icons/bs';\r\nimport { Card } from '../ui-components/card.js'\r\nimport { Modal } from '../ui-components/modal'\r\n\r\n\r\n// -------------------------------[ REGISTER VIEW ]------------------------------- //\r\n\r\n/**\r\n * \r\n * @returns Register view\r\n */\r\n\r\nconst Register = () => {\r\n    const [credentialsReg, setCredentialsReg] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (credentialsReg) {\r\n            const c = JSON.stringify(credentialsReg, null, 2);\r\n            alert(c);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <Card>\r\n            <h2 className=\"card-title fw-bold pt-3\">\r\n                <div className='d-flex justify-content-center'>\r\n                    <BsPencilSquare className='fs-1 me-2' />\r\n                    REGISTER\r\n                </div>\r\n            </h2>\r\n            <h3 className='mt-5 fw-bold' style={{ color: '#6456ff' }}>Hello, please fill in!</h3>\r\n            <h6 className='mt-3 mb-4 text-muted'>Enter your credentials to continue.</h6>\r\n            <RegisterValidationSchema onSubmit={(e) => setCredentialsReg(e)} />\r\n            <hr className=\" border border-secondary-subtle opacity-50\" />\r\n            <Link to=\"/authentication/login\" style={{ color: 'black', textDecoration: 'none' }}>Already have an account?</Link>\r\n            <Modal>...</Modal>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Register;"],"names":["Card","props","className","style","width","minHeight","children","strengthIndicator","number","strengths","length","RegExp","test","hasNumber","hasSpecial","hasMixed","RegisterFormSchema","Yup","shape","firstName","min","max","required","lastName","email","password","termCondCheck","oneOf","RegisterValidationSchema","onSubmit","useState","strength","setStrength","level","setLevel","initialValues","validationSchema","values","actions","Promise","r","setTimeout","console","log","resetForm","setSubmitting","errors","touched","isSubmitting","type","name","placeholder","htmlFor","onKeyUp","e","value","count","temp","label","color","percentage","PasswordLevel","target","role","backgroundColor","id","onClick","textDecoration","disabled","Modal","credentialsReg","setCredentialsReg","useEffect","c","JSON","stringify","alert","to"],"sourceRoot":""}